// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	users "github.com/rizadwiandhika/miniproject-backend-alterra/features/users"
	mock "github.com/stretchr/testify/mock"
)

// IBusiness is an autogenerated mock type for the IBusiness type
type IBusiness struct {
	mock.Mock
}

// CreateFollower provides a mock function with given fields: username, followerUsername
func (_m *IBusiness) CreateFollower(username string, followerUsername string) (error, int) {
	ret := _m.Called(username, followerUsername)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(username, followerUsername)
	} else {
		r0 = ret.Error(0)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, string) int); ok {
		r1 = rf(username, followerUsername)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: user
func (_m *IBusiness) CreateUser(user users.UserCore) (users.UserCore, error, int) {
	ret := _m.Called(user)

	var r0 users.UserCore
	if rf, ok := ret.Get(0).(func(users.UserCore) users.UserCore); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(users.UserCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(users.UserCore) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(users.UserCore) int); ok {
		r2 = rf(user)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// EditUser provides a mock function with given fields: user
func (_m *IBusiness) EditUser(user users.UserCore) (users.UserCore, error, int) {
	ret := _m.Called(user)

	var r0 users.UserCore
	if rf, ok := ret.Get(0).(func(users.UserCore) users.UserCore); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(users.UserCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(users.UserCore) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(users.UserCore) int); ok {
		r2 = rf(user)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// FindUserByEmail provides a mock function with given fields: email
func (_m *IBusiness) FindUserByEmail(email string) (users.UserCore, error, int) {
	ret := _m.Called(email)

	var r0 users.UserCore
	if rf, ok := ret.Get(0).(func(string) users.UserCore); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(users.UserCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(string) int); ok {
		r2 = rf(email)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// FindUserById provides a mock function with given fields: id
func (_m *IBusiness) FindUserById(id uint) (users.UserCore, error, int) {
	ret := _m.Called(id)

	var r0 users.UserCore
	if rf, ok := ret.Get(0).(func(uint) users.UserCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(users.UserCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(uint) int); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// FindUserByUsername provides a mock function with given fields: username
func (_m *IBusiness) FindUserByUsername(username string) (users.UserCore, error, int) {
	ret := _m.Called(username)

	var r0 users.UserCore
	if rf, ok := ret.Get(0).(func(string) users.UserCore); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(users.UserCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(string) int); ok {
		r2 = rf(username)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// FindUserFollowers provides a mock function with given fields: username
func (_m *IBusiness) FindUserFollowers(username string) (users.UserCore, error, int) {
	ret := _m.Called(username)

	var r0 users.UserCore
	if rf, ok := ret.Get(0).(func(string) users.UserCore); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(users.UserCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(string) int); ok {
		r2 = rf(username)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// FindUserFollowings provides a mock function with given fields: username
func (_m *IBusiness) FindUserFollowings(username string) (users.UserCore, error, int) {
	ret := _m.Called(username)

	var r0 users.UserCore
	if rf, ok := ret.Get(0).(func(string) users.UserCore); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(users.UserCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(string) int); ok {
		r2 = rf(username)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// FindUsers provides a mock function with given fields:
func (_m *IBusiness) FindUsers() ([]users.UserCore, error, int) {
	ret := _m.Called()

	var r0 []users.UserCore
	if rf, ok := ret.Get(0).(func() []users.UserCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.UserCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func() int); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// FindUsersByIds provides a mock function with given fields: ids
func (_m *IBusiness) FindUsersByIds(ids []uint) ([]users.UserCore, error, int) {
	ret := _m.Called(ids)

	var r0 []users.UserCore
	if rf, ok := ret.Get(0).(func([]uint) []users.UserCore); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.UserCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]uint) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func([]uint) int); ok {
		r2 = rf(ids)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// RemoveFollowing provides a mock function with given fields: username, followingUsername
func (_m *IBusiness) RemoveFollowing(username string, followingUsername string) (error, int) {
	ret := _m.Called(username, followingUsername)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(username, followingUsername)
	} else {
		r0 = ret.Error(0)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, string) int); ok {
		r1 = rf(username, followingUsername)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// RemoveUser provides a mock function with given fields: username
func (_m *IBusiness) RemoveUser(username string) (error, int) {
	ret := _m.Called(username)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Error(0)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string) int); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}
