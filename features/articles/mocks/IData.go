// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	articles "github.com/rizadwiandhika/miniproject-backend-alterra/features/articles"
	mock "github.com/stretchr/testify/mock"
)

// IData is an autogenerated mock type for the IData type
type IData struct {
	mock.Mock
}

// DeleteArticleById provides a mock function with given fields: id
func (_m *IData) DeleteArticleById(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteArticleTags provides a mock function with given fields: id
func (_m *IData) DeleteArticleTags(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteArticlesByUserId provides a mock function with given fields: userID
func (_m *IData) DeleteArticlesByUserId(userID uint) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTagByArticleIds provides a mock function with given fields: id
func (_m *IData) DeleteTagByArticleIds(id []uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func([]uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertArticle provides a mock function with given fields: article
func (_m *IData) InsertArticle(article articles.ArticleCore) (articles.ArticleCore, error) {
	ret := _m.Called(article)

	var r0 articles.ArticleCore
	if rf, ok := ret.Get(0).(func(articles.ArticleCore) articles.ArticleCore); ok {
		r0 = rf(article)
	} else {
		r0 = ret.Get(0).(articles.ArticleCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(articles.ArticleCore) error); ok {
		r1 = rf(article)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectArticleById provides a mock function with given fields: id
func (_m *IData) SelectArticleById(id uint) (articles.ArticleCore, error) {
	ret := _m.Called(id)

	var r0 articles.ArticleCore
	if rf, ok := ret.Get(0).(func(uint) articles.ArticleCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(articles.ArticleCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectArticles provides a mock function with given fields: params
func (_m *IData) SelectArticles(params articles.QueryParams) ([]articles.ArticleCore, error) {
	ret := _m.Called(params)

	var r0 []articles.ArticleCore
	if rf, ok := ret.Get(0).(func(articles.QueryParams) []articles.ArticleCore); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]articles.ArticleCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(articles.QueryParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectArticlesByAuthorId provides a mock function with given fields: id
func (_m *IData) SelectArticlesByAuthorId(id uint) ([]articles.ArticleCore, error) {
	ret := _m.Called(id)

	var r0 []articles.ArticleCore
	if rf, ok := ret.Get(0).(func(uint) []articles.ArticleCore); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]articles.ArticleCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateArticle provides a mock function with given fields: article
func (_m *IData) UpdateArticle(article articles.ArticleCore) (articles.ArticleCore, error) {
	ret := _m.Called(article)

	var r0 articles.ArticleCore
	if rf, ok := ret.Get(0).(func(articles.ArticleCore) articles.ArticleCore); ok {
		r0 = rf(article)
	} else {
		r0 = ret.Get(0).(articles.ArticleCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(articles.ArticleCore) error); ok {
		r1 = rf(article)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
