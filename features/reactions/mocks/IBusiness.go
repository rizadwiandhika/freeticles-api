// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	reactions "github.com/rizadwiandhika/miniproject-backend-alterra/features/reactions"
	mock "github.com/stretchr/testify/mock"
)

// IBusiness is an autogenerated mock type for the IBusiness type
type IBusiness struct {
	mock.Mock
}

// CountTotalArticleLikes provides a mock function with given fields: articleId
func (_m *IBusiness) CountTotalArticleLikes(articleId uint) (int, error) {
	ret := _m.Called(articleId)

	var r0 int
	if rf, ok := ret.Get(0).(func(uint) int); ok {
		r0 = rf(articleId)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(articleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Dislike provides a mock function with given fields: username, articleId
func (_m *IBusiness) Dislike(username string, articleId uint) (error, int) {
	ret := _m.Called(username, articleId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint) error); ok {
		r0 = rf(username, articleId)
	} else {
		r0 = ret.Error(0)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, uint) int); ok {
		r1 = rf(username, articleId)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// FindCommentsByArticleId provides a mock function with given fields: articleId
func (_m *IBusiness) FindCommentsByArticleId(articleId uint) ([]reactions.CommentCore, error, int) {
	ret := _m.Called(articleId)

	var r0 []reactions.CommentCore
	if rf, ok := ret.Get(0).(func(uint) []reactions.CommentCore); ok {
		r0 = rf(articleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]reactions.CommentCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(articleId)
	} else {
		r1 = ret.Error(1)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(uint) int); ok {
		r2 = rf(articleId)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// PostComment provides a mock function with given fields: username, articleId, commentar
func (_m *IBusiness) PostComment(username string, articleId uint, commentar string) (error, int) {
	ret := _m.Called(username, articleId, commentar)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint, string) error); ok {
		r0 = rf(username, articleId, commentar)
	} else {
		r0 = ret.Error(0)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, uint, string) int); ok {
		r1 = rf(username, articleId, commentar)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// PostLike provides a mock function with given fields: username, articleId
func (_m *IBusiness) PostLike(username string, articleId uint) (error, int) {
	ret := _m.Called(username, articleId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint) error); ok {
		r0 = rf(username, articleId)
	} else {
		r0 = ret.Error(0)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, uint) int); ok {
		r1 = rf(username, articleId)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// RemoveCommentsByArticleId provides a mock function with given fields: articleId
func (_m *IBusiness) RemoveCommentsByArticleId(articleId uint) error {
	ret := _m.Called(articleId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(articleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveCommentsByUserId provides a mock function with given fields: userId
func (_m *IBusiness) RemoveCommentsByUserId(userId uint) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveLikesByArticleId provides a mock function with given fields: articleId
func (_m *IBusiness) RemoveLikesByArticleId(articleId uint) error {
	ret := _m.Called(articleId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(articleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveLikesByUserId provides a mock function with given fields: userId
func (_m *IBusiness) RemoveLikesByUserId(userId uint) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveReportsByArticleId provides a mock function with given fields: articleId
func (_m *IBusiness) RemoveReportsByArticleId(articleId uint) error {
	ret := _m.Called(articleId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(articleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveReportsByUserId provides a mock function with given fields: userId
func (_m *IBusiness) RemoveReportsByUserId(userId uint) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReportArticle provides a mock function with given fields: username, articleId, reportTypeId
func (_m *IBusiness) ReportArticle(username string, articleId uint, reportTypeId uint) (error, int) {
	ret := _m.Called(username, articleId, reportTypeId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint, uint) error); ok {
		r0 = rf(username, articleId, reportTypeId)
	} else {
		r0 = ret.Error(0)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, uint, uint) int); ok {
		r1 = rf(username, articleId, reportTypeId)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}
