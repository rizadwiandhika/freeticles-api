// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	auth "github.com/rizadwiandhika/miniproject-backend-alterra/features/auth"
	mock "github.com/stretchr/testify/mock"
)

// IBusiness is an autogenerated mock type for the IBusiness type
type IBusiness struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: user
func (_m *IBusiness) Authenticate(user auth.UserCore) (string, error, int) {
	ret := _m.Called(user)

	var r0 string
	if rf, ok := ret.Get(0).(func(auth.UserCore) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(auth.UserCore) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(auth.UserCore) int); ok {
		r2 = rf(user)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// Register provides a mock function with given fields: user
func (_m *IBusiness) Register(user auth.UserCore) (auth.UserCore, error, int) {
	ret := _m.Called(user)

	var r0 auth.UserCore
	if rf, ok := ret.Get(0).(func(auth.UserCore) auth.UserCore); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(auth.UserCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(auth.UserCore) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(auth.UserCore) int); ok {
		r2 = rf(user)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}
