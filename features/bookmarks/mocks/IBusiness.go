// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	bookmarks "github.com/rizadwiandhika/miniproject-backend-alterra/features/bookmarks"
	mock "github.com/stretchr/testify/mock"
)

// IBusiness is an autogenerated mock type for the IBusiness type
type IBusiness struct {
	mock.Mock
}

// CreateBookmark provides a mock function with given fields: username, articleID
func (_m *IBusiness) CreateBookmark(username string, articleID uint) error {
	ret := _m.Called(username, articleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint) error); ok {
		r0 = rf(username, articleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBookmark provides a mock function with given fields: username, articleID
func (_m *IBusiness) DeleteBookmark(username string, articleID uint) error {
	ret := _m.Called(username, articleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint) error); ok {
		r0 = rf(username, articleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBookmarksByArticleId provides a mock function with given fields: articleID
func (_m *IBusiness) DeleteBookmarksByArticleId(articleID uint) error {
	ret := _m.Called(articleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(articleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBookmarksByUserId provides a mock function with given fields: userID
func (_m *IBusiness) DeleteBookmarksByUserId(userID uint) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindUserBookmarks provides a mock function with given fields: username
func (_m *IBusiness) FindUserBookmarks(username string) ([]bookmarks.BookmarkCore, error) {
	ret := _m.Called(username)

	var r0 []bookmarks.BookmarkCore
	if rf, ok := ret.Get(0).(func(string) []bookmarks.BookmarkCore); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bookmarks.BookmarkCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
