// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	reactions "github.com/rizadwiandhika/miniproject-backend-alterra/features/reactions"
	mock "github.com/stretchr/testify/mock"
)

// IData is an autogenerated mock type for the IData type
type IData struct {
	mock.Mock
}

// DeleteCommentsByArticleId provides a mock function with given fields: articleId
func (_m *IData) DeleteCommentsByArticleId(articleId uint) error {
	ret := _m.Called(articleId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(articleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCommentsByUserId provides a mock function with given fields: userId
func (_m *IData) DeleteCommentsByUserId(userId uint) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLikeById provides a mock function with given fields: likeId
func (_m *IData) DeleteLikeById(likeId uint) error {
	ret := _m.Called(likeId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(likeId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLikesByArticleId provides a mock function with given fields: articleId
func (_m *IData) DeleteLikesByArticleId(articleId uint) error {
	ret := _m.Called(articleId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(articleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLikesByUserId provides a mock function with given fields: userId
func (_m *IData) DeleteLikesByUserId(userId uint) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteReportsByArticleId provides a mock function with given fields: articleId
func (_m *IData) DeleteReportsByArticleId(articleId uint) error {
	ret := _m.Called(articleId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(articleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteReportsByUserId provides a mock function with given fields: userId
func (_m *IData) DeleteReportsByUserId(userId uint) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertComment provides a mock function with given fields: comment
func (_m *IData) InsertComment(comment reactions.CommentCore) error {
	ret := _m.Called(comment)

	var r0 error
	if rf, ok := ret.Get(0).(func(reactions.CommentCore) error); ok {
		r0 = rf(comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertLike provides a mock function with given fields: like
func (_m *IData) InsertLike(like reactions.LikeCore) error {
	ret := _m.Called(like)

	var r0 error
	if rf, ok := ret.Get(0).(func(reactions.LikeCore) error); ok {
		r0 = rf(like)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertReport provides a mock function with given fields: report
func (_m *IData) InsertReport(report reactions.ReportCore) error {
	ret := _m.Called(report)

	var r0 error
	if rf, ok := ret.Get(0).(func(reactions.ReportCore) error); ok {
		r0 = rf(report)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectCommentsByArticleId provides a mock function with given fields: articleId
func (_m *IData) SelectCommentsByArticleId(articleId uint) ([]reactions.CommentCore, error) {
	ret := _m.Called(articleId)

	var r0 []reactions.CommentCore
	if rf, ok := ret.Get(0).(func(uint) []reactions.CommentCore); ok {
		r0 = rf(articleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]reactions.CommentCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(articleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectCountLikes provides a mock function with given fields: articleId
func (_m *IData) SelectCountLikes(articleId uint) (int, error) {
	ret := _m.Called(articleId)

	var r0 int
	if rf, ok := ret.Get(0).(func(uint) int); ok {
		r0 = rf(articleId)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(articleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectLike provides a mock function with given fields: like
func (_m *IData) SelectLike(like reactions.LikeCore) (reactions.LikeCore, error) {
	ret := _m.Called(like)

	var r0 reactions.LikeCore
	if rf, ok := ret.Get(0).(func(reactions.LikeCore) reactions.LikeCore); ok {
		r0 = rf(like)
	} else {
		r0 = ret.Get(0).(reactions.LikeCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(reactions.LikeCore) error); ok {
		r1 = rf(like)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectUserReport provides a mock function with given fields: userId, articleId
func (_m *IData) SelectUserReport(userId uint, articleId uint) (reactions.ReportCore, error) {
	ret := _m.Called(userId, articleId)

	var r0 reactions.ReportCore
	if rf, ok := ret.Get(0).(func(uint, uint) reactions.ReportCore); ok {
		r0 = rf(userId, articleId)
	} else {
		r0 = ret.Get(0).(reactions.ReportCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userId, articleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
