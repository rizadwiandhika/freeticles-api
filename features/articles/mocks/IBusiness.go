// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	articles "github.com/rizadwiandhika/miniproject-backend-alterra/features/articles"
	mock "github.com/stretchr/testify/mock"
)

// IBusiness is an autogenerated mock type for the IBusiness type
type IBusiness struct {
	mock.Mock
}

// CreateArticle provides a mock function with given fields: article
func (_m *IBusiness) CreateArticle(article articles.ArticleCore) (articles.ArticleCore, error, int) {
	ret := _m.Called(article)

	var r0 articles.ArticleCore
	if rf, ok := ret.Get(0).(func(articles.ArticleCore) articles.ArticleCore); ok {
		r0 = rf(article)
	} else {
		r0 = ret.Get(0).(articles.ArticleCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(articles.ArticleCore) error); ok {
		r1 = rf(article)
	} else {
		r1 = ret.Error(1)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(articles.ArticleCore) int); ok {
		r2 = rf(article)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// EditArticle provides a mock function with given fields: article
func (_m *IBusiness) EditArticle(article articles.ArticleCore) (articles.ArticleCore, error, int) {
	ret := _m.Called(article)

	var r0 articles.ArticleCore
	if rf, ok := ret.Get(0).(func(articles.ArticleCore) articles.ArticleCore); ok {
		r0 = rf(article)
	} else {
		r0 = ret.Get(0).(articles.ArticleCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(articles.ArticleCore) error); ok {
		r1 = rf(article)
	} else {
		r1 = ret.Error(1)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(articles.ArticleCore) int); ok {
		r2 = rf(article)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// FindArticleById provides a mock function with given fields: id
func (_m *IBusiness) FindArticleById(id uint) (articles.ArticleCore, error, int) {
	ret := _m.Called(id)

	var r0 articles.ArticleCore
	if rf, ok := ret.Get(0).(func(uint) articles.ArticleCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(articles.ArticleCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(uint) int); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// FindArticles provides a mock function with given fields: params
func (_m *IBusiness) FindArticles(params articles.QueryParams) ([]articles.ArticleCore, error, int) {
	ret := _m.Called(params)

	var r0 []articles.ArticleCore
	if rf, ok := ret.Get(0).(func(articles.QueryParams) []articles.ArticleCore); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]articles.ArticleCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(articles.QueryParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(articles.QueryParams) int); ok {
		r2 = rf(params)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// FindTranslatedArticleById provides a mock function with given fields: id, lang
func (_m *IBusiness) FindTranslatedArticleById(id uint, lang string) (articles.ArticleCore, error, int) {
	ret := _m.Called(id, lang)

	var r0 articles.ArticleCore
	if rf, ok := ret.Get(0).(func(uint, string) articles.ArticleCore); ok {
		r0 = rf(id, lang)
	} else {
		r0 = ret.Get(0).(articles.ArticleCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(id, lang)
	} else {
		r1 = ret.Error(1)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(uint, string) int); ok {
		r2 = rf(id, lang)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// FindUserArticles provides a mock function with given fields: username
func (_m *IBusiness) FindUserArticles(username string) ([]articles.ArticleCore, error, int) {
	ret := _m.Called(username)

	var r0 []articles.ArticleCore
	if rf, ok := ret.Get(0).(func(string) []articles.ArticleCore); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]articles.ArticleCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(string) int); ok {
		r2 = rf(username)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// RemoveArticleById provides a mock function with given fields: id
func (_m *IBusiness) RemoveArticleById(id uint) (error, int) {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(uint) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// RemoveUserArticles provides a mock function with given fields: userID
func (_m *IBusiness) RemoveUserArticles(userID uint) (error, int) {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(uint) int); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}
